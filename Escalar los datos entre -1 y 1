from sklearn.preprocessing import MinMaxScaler

def escalar_dataset(data_input, col_ref):
    '''Escala el dataset en el rango de -1 a 1.

    Entradas:
    - data_input: diccionario con los dataset de entrada y salida del modelo
    (data_input = {'x_tr':x_tr, 'y_tr':y_tr, 'x_vl':x_vl, 'y_vl':y_vl,
                    'y_ts':y_ts})
    - col_ref: parámetro adicional para especificar la columna que contiene
      la variable a predecir


    Retorna:
    - data_scaled: diccionario con los datasets de entrada y salida escalados
      (tiene la misma estructura del diccionario de entrada)
    - scaler: el escalador usado (requerido para las predicciones)
    '''

    # *** Implementación adicional: determinar el índice de la columna
    # que contiene la variable a predecir
    col_ref = datos.columns.get_loc(col_ref)

    # Número de instantes de tiempo de entrada y de covariables
    NFEATS = datos.shape[1]

    # Generar listado con "scalers" (1 por cada covariable de entrada)
    scalers = [MinMaxScaler(feature_range=(-1,1)) for i in range(NFEATS)]

    # Arreglos que contendrán los datasets escalados
    datos_s = np.zeros(data_input.shape)

    # Escalamiento: se usarán los min/max del set de entrenamiento para
    # escalar la totalidad de los datasets

    # Escalamiento Xs
    for i in range(NFEATS):
        datos_i = datos.iloc[:, i].values.reshape(-1, 1)
        datos_s[:, i] = scalers[i].fit_transform(datos_i).flatten()
    # Conformar diccionario de salida


    return datos_s, scalers[col_ref]

# Escalamiento del dataset con la función anterior

# Y escalar (especificando la columna con la variable a predecir)
data_s, scaler = escalar_dataset(datos, col_ref = 'P' )
datos_esc_df=pd.DataFrame(data_s)
datos_esc_df.columns=list(datos.columns.values)
datos_esc_df
